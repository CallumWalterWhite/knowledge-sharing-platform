@page "/create-post"
@using KnowledgeShare.Core.Posts
@using Microsoft.AspNetCore.Components
@using KnowledgeShare.Core.Tags
@inject ICreatePostService CreatePostService;
@inject IGetAllTagsService GetAllTagsService;
@inject NavigationManager NavigationManager;

<PageTitle>MHR Knowledge sharing platform - Create post</PageTitle>
<div class="row">
    <div class="col-2"></div>
    <div class="col-8">
        
        <h1>Create Post</h1>
        <EditForm Model="@post" OnValidSubmit="@Create">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="form-group">
                <label for="postType">Post Type</label>
                <select class="form-control" id="postType" @bind="@post.Discriminator">
                    <option value="@PostTypeDiscriminator.Article">Link</option>
                    <option value="@PostTypeDiscriminator.Book">Book</option>
                    <option value="@PostTypeDiscriminator.Free">Free Form</option>
                </select>
            </div>

            @if (post.Discriminator == PostTypeDiscriminator.Article)
            {
                <div class="form-group">
                    <label for="title">Title</label>
                    <InputText class="form-control" id="title" @bind-Value="@(post.Title)"/>
                    <ValidationMessage For="@(() => (post).Title)"/>
                </div>

                <div class="form-group">
                    <label for="link">Link</label>
                    <InputText class="form-control" id="link" @bind-Value="@(post.Link)"/>
                    <ValidationMessage For="@(() => (post).Link)"/>
                </div>

                <div class="form-group">
                    <label for="summary">Summary</label>
                    <RadzenTextArea class="form-control" id="summary" @bind-Value="@(post.Summary)"/>
                    <ValidationMessage For="@(() => (post).Summary)"/>
                </div>
            }

            @if (post.Discriminator == PostTypeDiscriminator.Book)
            {
                <div class="form-group">
                    <label for="title">Title</label>
                    <InputText class="form-control" id="title" @bind-Value="@(post.Title)"/>
                    <ValidationMessage For="@(() => (post).Title)"/>
                </div>

                <div class="form-group">
                    <label for="author">Author</label>
                    <InputText class="form-control" id="author" @bind-Value="@(post.Author)"/>
                    <ValidationMessage For="@(() => (post).Author)"/>
                </div>

                <div class="form-group">
                    <label for="summary">Summary</label>
                    <RadzenTextArea class="form-control text-body" id="summary" @bind-Value="@(post.Summary)"/>
                    <ValidationMessage For="@(() => (post).Summary)"/>
                </div>
            }


            @if (post.Discriminator == PostTypeDiscriminator.Free)
            {
                <div class="form-group">
                    <label for="title">Title</label>
                    <InputText class="form-control" id="title" @bind-Value="@(post.Title)"/>
                    <ValidationMessage For="@(() => (post).Title)"/>
                </div>

                <div class="form-group">
                    <label for="title">Body</label>
                    <RadzenHtmlEditor @bind-Value=@post.Body style="height: 500px;" UploadUrl="upload/image">
                    </RadzenHtmlEditor>
                </div>
            }

            <div class="form-group">
                <label for="tagSearchInput">Search for a tag:</label>
                <div class="input-group">
                    <input type="text" class="form-control" id="tagSearchInput" @bind-value="@searchQuery" @bind-value:event="oninput" placeholder="Enter a tag name..."/>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="AddTag">Add</button>
                    </div>
                </div>
            </div>
            @if (post.Tags.Any())
            {
                <div class="form-group">
                    <ul class="list-group">
                        @foreach (var tag in post.Tags)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>@tag</span>
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveTag(tag)">
                                    <RadzenIcon Icon="delete"/>
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <p>No tags selected.</p>
            }


            <button style="margin-top: 20px; float: right;" type="submit" class="btn btn-primary">Create Post</button>
        </EditForm>
    </div>
    <div class="col-2"></div>
</div>

<style>
    .form-group{
        margin-top: 10px;
    }
    
    .validation-errors{
        border: 1px solid #dc3545;
        border-radius: 8px;
        background: #dc3545;
    }
    .validation-message {
        color: white !important;
    }
</style>

@code {
    bool creating = false;
    
    private CreatePostDto post = new CreatePostDto()
    {
        Discriminator = PostTypeDiscriminator.Article,
        Tags = new List<string>()
    };

    private async Task Create()
    {
        if (!creating)
        {
            creating = true;
            Guid id = await CreatePostService.Create(post);
            switch (post.Discriminator)
            {
                case PostTypeDiscriminator.Article:
                    NavigationManager.NavigateTo($"/articlepost/{id}");
                    break;
                case PostTypeDiscriminator.Book:
                    NavigationManager.NavigateTo($"/bookpost/{id}");
                    break;
                case PostTypeDiscriminator.Free:
                    NavigationManager.NavigateTo($"/freeformpost/{id}");
                    break;
            }
        }
    }
    
    private string searchQuery;

    private async Task AddTag()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery) && !post.Tags.Contains(searchQuery))
        {
            post.Tags.Add(searchQuery);
            searchQuery = string.Empty;
        }
    }

    private async Task RemoveTag(string tag)
    {
        post.Tags.Remove(tag);
    }
}
