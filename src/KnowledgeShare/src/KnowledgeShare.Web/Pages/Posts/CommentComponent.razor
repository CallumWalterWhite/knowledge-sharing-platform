@using KnowledgeShare.Core
@using KnowledgeShare.Core.Authentication
@using KnowledgeShare.Core.People
@using KnowledgeShare.Core.Social
@inject ICreatePostCommentService CreatePostCommentService;
@inject IGetPostCommentService GetPostCommentService;
@inject ICurrentAuthUser CurrentAuthUser;
<div class="container border-left border-right">
    <div class="d-flex pt-3 pb-2">
        <form class="reply-form" id="comment-2-reply-form">
            <InputTextArea type="text" @bind-Value="PostComment" name="text" placeholder="Add a Comment" class="form-control addtxt" />
            <RadzenButton class="subtxt" Click="() => HandleSubmit()" Text="Comment"></RadzenButton>
        </form>
    </div>
    @if (comments.Count == 0)
    {
        <p>No comments yet.</p>
    }
    else
    {
        @foreach (var comment in comments)
        {
            <div class="comment-thread">
                <details open class="comment" id="comment-1">
                    <a href="#comment-1" class="comment-border-link">
                        <span class="sr-only">Jump to comment-1</span>
                    </a>
                    <summary>
                        <div class="comment-heading">
                            <div class="comment-info">
                                <a href="#" class="comment-author">@comment.personName</a>
                                <p class="m-0">
                                    @DateHelper.GetCommentDate(comment.dateTimeCreated)
                                </p>
                            </div>
                        </div>
                    </summary>
                  
                    <div class="comment-body">
                        <p>
                            @comment.comment
                        </p>
                    </div>
                  
                </details>
                <!-- Comment 1 end -->
            </div>
        }
    }
</div>

<style>
      .addtxt{
        	padding-top: 10px;
        	padding-bottom: 10px;
        	font-size: 13px;
        	width: 600px;
        	font-weight: 500;
        	resize: none;
        	border: 0px;
        }
        
        .subtxt{
            float: right;
            margin-top: 5px;
        }
        
        .comment-thread {
            width: 700px;
            max-width: 100%;
            padding: 0 30px;
            background-color: #fff;
            border: 1px solid transparent; /* Removes margin collapse */
        }
        .m-0 {
            margin: 0;
        }
        .sr-only {
            position: absolute;
            left: -10000px;
            top: auto;
            width: 1px;
            height: 1px;
            overflow: hidden;
        }
        
        /* Comment */
        
        .comment {
            position: relative;
            margin: 20px auto;
        }
        .comment-heading {
            display: flex;
            align-items: center;
            height: 50px;
            font-size: 14px;
        }
        .comment-voting {
            width: 20px;
            height: 32px;
            border: 1px solid rgba(0, 0, 0, 0.2);
            border-radius: 4px;
        }
        .comment-voting button {
            display: block;
            width: 100%;
            height: 50%;
            padding: 0;
            border: 0;
            font-size: 10px;
        }
        .comment-info {
            color: rgba(0, 0, 0, 0.5);
            margin-left: 10px;
        }
        .comment-author {
            color: rgba(0, 0, 0, 0.85);
            font-weight: bold;
            text-decoration: none;
        }
        .comment-author:hover {
            text-decoration: underline;
        }
        .replies {
            margin-left: 20px;
        }
        
        /* Adjustments for the comment border links */
        
        .comment-border-link {
            display: block;
            position: absolute;
            top: 50px;
            left: 0;
            width: 12px;
            height: calc(100% - 50px);
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            background-color: rgba(0, 0, 0, 0.1);
            background-clip: padding-box;
        }
        .comment-border-link:hover {
            background-color: rgba(0, 0, 0, 0.3);
        }
        .comment-body {
            padding: 0 20px;
            padding-left: 28px;
        }
        .replies {
            margin-left: 28px;
        }
        
        /* Adjustments for toggleable comments */
        
        details.comment summary {
            position: relative;
            list-style: none;
            cursor: pointer;
        }
        details.comment:not([open]) .comment-heading {
            border-bottom: 1px solid rgba(0, 0, 0, 0.2);
        }
        .comment-heading::after {
            display: inline-block;
            position: absolute;
            right: 5px;
            align-self: center;
            font-size: 12px;
            color: rgba(0, 0, 0, 0.55);
        }
</style>

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private Person CurrentPerson;

    public List<PostCommentDto> comments = new List<PostCommentDto>();
    
    
    private string PostComment = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        comments = (await GetPostCommentService.GetPostCommentsAsync(Id)).ToList();
        CurrentPerson = (await CurrentAuthUser.GetPersonAsync())!;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    
    
    private async Task HandleSubmit()
    {
        if (!string.IsNullOrWhiteSpace(PostComment))
        {
            await CreatePostCommentService.CreatePostCommentAsync(PostComment, Id);
            comments.Insert(0, new PostCommentDto(CurrentPerson.Name, CurrentPerson.Picture, PostComment, DateTime.Now));
            PostComment = string.Empty;   
        }
    }
}