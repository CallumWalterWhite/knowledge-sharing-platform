@page "/articlepost/{Id:guid}"
@using KnowledgeShare.Core.Posts.Types
@using KnowledgeShare.Core.Social
@using KnowledgeShare.Core.Authentication
@using KnowledgeShare.Core.People
@using KnowledgeShare.Core
@inject IGetArticlePostService GetArticlePostService;
@inject ICreateLikeRelationshipService CreateLikeRelationshipService;
@inject ICurrentAuthUser CurrentAuthUser;
@inject ICreatePostCommentService CreatePostCommentService;
@inject IGetPostCommentService GetPostCommentService;

@if (ArticlePost is not null)
{
    <PageTitle>MHR Knowledge sharing platform - @ArticlePost.Title</PageTitle>
    <div class="container">
        <h1 class="title">@ArticlePost.Title</h1>
        <p class="summary">@ArticlePost.GetSummary()</p>
        <LinkPreview Link="@ArticlePost.GetLink()" />

        <div class="row" style="margin-top: 20px;">
            @foreach (var tag in ArticlePost.Tags)
            {
                <RadzenBadge Text=@tag.Value Style="margin-right: 5px; width: auto;"></RadzenBadge>
            }
        </div>
        <div class="info">
            <p class="author">Created by: @ArticlePost.GetAuthor().Name</p>
            <p class="date">Created on: @ArticlePost.GetDateTimeCreated().ToShortDateString()</p>
        </div>

        <LikeComponent id="@Id" hasLiked="@hasLiked" likeCount="@likeCount" />
    </div>
    <CommentComponent Id="@Id" />
}


<style>
    .container {
        margin: 0 auto;
        padding: 20px;
    }

    .title {
        font-size: 32px;
        font-weight: bold;
        margin: 0 0 10px;
    }

    .summary {
        font-size: 18px;
        line-height: 1.5;
        margin: 0 0 20px;
    }

    .info {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin: 0 0 20px;
    }

    .author {
        font-size: 14px;
        color: #888;
        margin: 0;
    }

    .date {
        font-size: 14px;
        color: #888;
        margin: 0;
    }
</style>

@code {
    [Parameter]  
    public Guid Id { get; set; }

    public ArticlePost? ArticlePost = null;

    private Person CurrentPerson;

    protected override async Task OnInitializedAsync()
    {
        ArticlePost = await GetArticlePostService.GetArticlePostAsync(Id);
        IList<Guid> peopleLiked = ArticlePost.PeopleLiked.ToList();
        CurrentPerson = (await CurrentAuthUser.GetPersonAsync())!;
        likeCount = peopleLiked.Count;
        hasLiked = peopleLiked.Contains(CurrentPerson.Id);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    
    private int likeCount = 0;

    private bool hasLiked = false;
}