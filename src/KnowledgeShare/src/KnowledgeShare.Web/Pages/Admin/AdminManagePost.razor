@page "/admin-posts"
@using KnowledgeShare.Core.Posts
@using KnowledgeShare.Core.Authentication
@using KnowledgeShare.Core.People
@using KnowledgeShare.Core.Tags
@inject ISearchPostService SearchPostService;
@inject NavigationManager NavigationManager;
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject IDeletePostService DeletePostService;
@inject ICurrentAuthUser CurrentAuthUser;
@inject IGetAllTagsService GetAllTagsService;
@inject ITagService TagService;
@inject IPersonService PersonService;
@{
    if (!CurrentAuthUser.GetPersonAsync().GetAwaiter().GetResult()!.IsAdmin)
    {
        NavigationManager.NavigateTo("/");
    }
}

<PageTitle>MHR Knowledge sharing platform - Admin</PageTitle>
<p>Posts</p>
<RadzenDataGrid @ref="grid" 
                CellContextMenu="@OnCellContextMenu" 
                IsLoading=@isLoading 
                Count="@count" 
                Data="@posts" 
                LoadData="@LoadData" 
                FilterPopupRenderMode="PopupRenderMode.OnDemand" 
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                AllowSorting="true" 
                AllowFiltering="true" 
                AllowPaging="true" 
                PageSize="10" 
                PagerHorizontalAlign="HorizontalAlign.Center" 
                TItem="SearchPostResultDto" 
                ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Title" Title="Title" />
        <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Summary" Title="Summary" Sortable="false" Filterable="false" />
        <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Type" Title="Type" />
        <RadzenDataGridColumn TItem="SearchPostResultDto" Property="TagCount" Title="Amount of Tags" Filterable="false" />
        <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Likes" Title="Likes" Filterable="false" />
        <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Comments" Title="Comments" Filterable="false" />
    </Columns>
</RadzenDataGrid>
<div class="row mt-5">
    <div class="col-6">
        <p>Tags</p>
        <RadzenDataGrid 
            AllowFiltering="true" 
            FilterPopupRenderMode="PopupRenderMode.OnDemand" 
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
            AllowPaging="true" 
            PageSize="10"
            AllowSorting="true" 
            Data="@tags" TItem="TagPostCountDto" 
            ColumnWidth="200px"
            SelectionMode="DataGridSelectionMode.Single" 
            CellContextMenu="@OnTagCellContextMenu">
            <Columns>
                <RadzenDataGridColumn TItem="TagPostCountDto" Property="Tag" Title="Tag" />
                <RadzenDataGridColumn TItem="TagPostCountDto" Property="Count" Title="Post count" />
            </Columns>
        </RadzenDataGrid>
    </div>
    <div class="col-6">
        <p>People</p>
        <RadzenDataGrid 
            AllowFiltering="true" 
            FilterPopupRenderMode="PopupRenderMode.OnDemand" 
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
            AllowPaging="true" 
            PageSize="10"
            AllowSorting="true" 
            Data="@people" TItem="Person" 
            ColumnWidth="200px"
            SelectionMode="DataGridSelectionMode.Single" 
            CellContextMenu="@OnPersonCellContextMenu">
            <Columns>
                <RadzenDataGridColumn TItem="Person" Property="UserId" Title="User Id" />
                <RadzenDataGridColumn TItem="Person" Property="Name" Title="Name" />
                <RadzenDataGridColumn TItem="Person" Property="IsAdmin" Title="Is a admin?" />
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    bool isLoading = false;
    int count;
    RadzenDataGrid<SearchPostResultDto> grid;
    IList<SearchPostResultDto> posts;

    IList<TagPostCountDto> tags;
    IList<Person> people;
    
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();
        AdminSearchPostResultDto adminSearchPostResultDto = await SearchPostService.GetAllAsync(new AdminSearchPostDto()
        {
            Skip = args.Skip ?? 0
        });
        count = adminSearchPostResultDto.Count;
        posts = adminSearchPostResultDto.SearchPostResultDtos.ToList();

        isLoading = false;
    }

    void OnCellContextMenu(DataGridCellMouseEventArgs<SearchPostResultDto> args)
    {
        SearchPostResultDto resultDto = args.Data;

        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = 1, },
                new ContextMenuItem(){ Text = "Delete", Value = 3, },
            }, 
            async (e) => {
                       if (int.Parse(e.Value.ToString() ?? string.Empty) == 1)
                       {
                           switch (resultDto.Type)
                           {
                               case TypeConstant.ArticlePost:
                                   ContextMenuService.Close();
                                   NavigationManager.NavigateTo($"/articlepost/{resultDto.Id}");
                                   break;
                               case TypeConstant.BookPost:
                                   ContextMenuService.Close();
                                   NavigationManager.NavigateTo($"/bookpost/{resultDto.Id}");
                                   break;
                               case TypeConstant.FreeFormPost:
                                   ContextMenuService.Close();
                                   NavigationManager.NavigateTo($"/freeformpost/{resultDto.Id}");
                                   break;
                           }
                       }
                       else if (int.Parse(e.Value.ToString() ?? string.Empty) == 3)
                       {
                           bool? result = await DialogService.Confirm($"Are you sure you want to delete {resultDto.Title}?", "Delete post", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
                           if (result is not null)
                           {
                               if (result.Value)
                               {
                                   await DeletePostService.DeletePostAsync(resultDto.Id);
                                   await DialogService.Alert("Post Deleted!", $"{resultDto.Title} has been deleted", new AlertOptions() { OkButtonText = "Ok" });
                                   await base.OnInitializedAsync();
                                   await grid.GoToPage(1, true);
                                   await InvokeAsync(StateHasChanged);
                               }
                           }
                       }
            }
            );
    }
    

    void OnTagCellContextMenu(DataGridCellMouseEventArgs<TagPostCountDto> args)
    {
        TagPostCountDto resultDto = args.Data;

        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Delete", Value = 1, }
            }, 
            async (e) => {
                       if (int.Parse(e.Value.ToString() ?? string.Empty) == 1)
                       {
                           bool? result = await DialogService.Confirm($"Are you sure you want to delete {resultDto.Tag}?", "Delete tag", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
                           if (result is not null)
                           {
                               if (result.Value)
                               {
                                   await TagService.DeleteTag(resultDto.Id);
                                   await DialogService.Alert("Tag Deleted!", $"{resultDto.Tag} has been deleted", new AlertOptions() { OkButtonText = "Ok" });
                                   tags = (await GetAllTagsService.GetAllWithPostCountAsync()).ToList();
                                   await base.OnInitializedAsync();
                                   await InvokeAsync(StateHasChanged);
                               }
                           }
                       }
            }
            );
    }
    
    void OnPersonCellContextMenu(DataGridCellMouseEventArgs<Person> args)
    {
        Person resultDto = args.Data;
        string contextMenuText = 
            resultDto.IsAdmin ?
            "Revoke admin":
                "Grant admin";
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = contextMenuText, Value = 1, }
            }, 
            async (e) => {
                 if (int.Parse(e.Value.ToString() ?? string.Empty) == 1)
                 {
                     if (resultDto.IsAdmin)
                     {
                         bool? result = await DialogService.Confirm($"Are you sure you want to remove {resultDto.Name} as admin?", "Revoke admin", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
                         if (result is not null)
                         {
                             if (result.Value)
                             {
                                 await PersonService.SetIsAdminAsync(resultDto.Id, false);
                                 await DialogService.Alert("Admin Revoked!", $"{resultDto.Name} has been revoke admin privileges", new AlertOptions() { OkButtonText = "Ok" });
                                 people = (await PersonService.GetAllPeopleAsync()).ToList();
                                 await base.OnInitializedAsync();
                                 await InvokeAsync(StateHasChanged);
                             }
                         }
                     }
                     else
                     {
                         bool? result = await DialogService.Confirm($"Are you sure you want to grant {resultDto.Name} as admin?", "Grant admin", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
                         if (result is not null)
                         {
                             if (result.Value)
                             {
                                 await PersonService.SetIsAdminAsync(resultDto.Id, true);
                                 await DialogService.Alert("Admin Granted!", $"{resultDto.Name} has been granted admin privileges", new AlertOptions() { OkButtonText = "Ok" });
                                 people = (await PersonService.GetAllPeopleAsync()).ToList();
                                 await base.OnInitializedAsync();
                                 await InvokeAsync(StateHasChanged);
                             }
                         }
                     }
                 }
            }
            );
    }
    
    protected override async Task OnInitializedAsync()
    {
        tags = (await GetAllTagsService.GetAllWithPostCountAsync()).ToList();
        people = (await PersonService.GetAllPeopleAsync()).ToList();
    }
}