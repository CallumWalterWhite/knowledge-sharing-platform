@page "/freeformpost/{Id:guid}"
@using KnowledgeShare.Core.Posts.Types
@using KnowledgeShare.Core.Social
@using KnowledgeShare.Core.Authentication
@using KnowledgeShare.Core.People
@inject IGetFreeFormPostService GetFreeFormPostService;
@inject ICreateLikeRelationshipService CreateLikeRelationshipService;
@inject ICurrentAuthUser CurrentAuthUser;
@inject ICreatePostCommentService CreatePostCommentService;
@inject IGetPostCommentService GetPostCommentService;


@if (FreeFormPost is not null)
{
    <PageTitle>MHR Knowledge sharing platform - @FreeFormPost.Title</PageTitle>
    <div class="container">
        <h1 class="title">@FreeFormPost.Title</h1>
        <div>@((MarkupString)@FreeFormPost.GetBody())</div>

        <div class="row" style="margin-top: 20px;">
            @foreach (var tag in FreeFormPost.Tags)
            {
                <RadzenBadge Text=@tag.Value Style="max-width: 90px; margin-right: 5px;"></RadzenBadge>
            }
        </div>
        <div class="info">
            <p class="author">Created by: @FreeFormPost.GetAuthor().Name</p>
            <p class="date">Created on: @FreeFormPost.GetDateTimeCreated().ToShortDateString()</p>
        </div>

        <div class="actions">
            <button disabled="@hasLiked" class="like-button" @onclick="Like"><i class="fas fa-heart"></i> Like</button>
            <p class="likes">Likes: @likeCount</p>
        </div>
    </div>
    
    
    <div class="container justify-content-center mt-5 border-left border-right">
        <div class="d-flex justify-content-center pt-3 pb-2"> <InputText type="text"  @onkeydown="@HandleSubmit" @bind-Value="PostComment" name="text" placeholder="+ Add a Comment" class="form-control addtxt" /> </div>
        @if (comments.Count == 0)
        {
            <p>No comments yet.</p>
        }
        else
        {
            @foreach (var comment in comments)
            {
                <div class="d-flex justify-content-center py-2">
                    <div class="second py-2 px-2"> <span class="text1">@comment.comment</span>
                        <div class="d-flex justify-content-between py-1 pt-2">
                            <div><img src="@comment.personPicture" style="border: 1px solid #fff; border-radius: 20px;" width="18"><span class="text2">@comment.personName</span></div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

}

<style>
    .addtxt{
    	padding-top: 10px;
    	padding-bottom: 10px;
    	text-align: center;
    	font-size: 13px;
    	width: 350px;
    	background-color: #e5e8ed;
    	font-weight: 500;
    }
    
    .second{
    	width: 350px;
    	background-color: white;
    	border-radius: 4px;
    	box-shadow: 10px 10px 5px #aaaaaa;
    }
    .text1{
    	font-size: 13px;
        font-weight: 500;
        color: #56575b;
    }
    .text2{
    	font-size: 13px;
        font-weight: 500;
        margin-left: 6px;
        color: #56575b;
    }

    .container {
        margin: 0 auto;
        padding: 20px;
    }

    .title {
        font-size: 32px;
        font-weight: bold;
        margin: 0 0 10px;
    }

    .summary {
        font-size: 18px;
        line-height: 1.5;
        margin: 0 0 20px;
    }

    .info {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin: 0 0 20px;
    }

    .author {
        font-size: 14px;
        color: #888;
        margin: 0;
    }

    .date {
        font-size: 14px;
        color: #888;
        margin: 0;
    }

    .actions {
        display: flex;
        align-items: center;
    }

    .like-button {
        display: flex;
        align-items: center;
        font-size: 16px;
        color: #06c;
        background-color: transparent;
        border: none;
        cursor: pointer;
        margin: 0;
        padding: 0;
    }

    .like-button:hover {
        text-decoration: underline;
    }

    .likes {
        font-size: 14px;
        color: #888;
        margin: 0 0 0 10px;
    }
</style>

@code {

    [Parameter]
    public Guid Id { get; set; }

    public FreeFormPost? FreeFormPost = null;
    
    public List<PostCommentDto> comments = new List<PostCommentDto>();

    private Person CurrentPerson;
    
    private string PostComment = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        FreeFormPost = await GetFreeFormPostService.GetFreeFormPostAsync(Id);
        comments = (await GetPostCommentService.GetPostCommentsAsync(Id)).ToList();
        IList<Guid> peopleLiked = FreeFormPost.PeopleLiked.ToList();
        CurrentPerson = (await CurrentAuthUser.GetPersonAsync())!;
        likeCount = peopleLiked.Count;
        hasLiked = peopleLiked.Contains(CurrentPerson.Id);
    }

    private int likeCount = 0;

    private bool hasLiked = false;

    private async Task Like()
    {
        await CreateLikeRelationshipService.CreateLike(FreeFormPost!.Id);
        hasLiked = true;
        likeCount++;
    }
    
    private async Task HandleSubmit(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await CreatePostCommentService.CreatePostCommentAsync(PostComment, Id);
            comments.Add(new PostCommentDto(CurrentPerson.Name, CurrentPerson.Picture, PostComment, DateTime.Now));
            PostComment = string.Empty;
        }
    }

}