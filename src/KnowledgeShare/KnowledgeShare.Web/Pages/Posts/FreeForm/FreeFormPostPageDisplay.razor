@page "/freeformpost/{Id:guid}"
@using KnowledgeShare.Core.Posts.Types
@using KnowledgeShare.Core.Social
@using KnowledgeShare.Core.Authentication
@using KnowledgeShare.Core.People
@inject IGetFreeFormPostService GetFreeFormPostService;
@inject ICreateLikeRelationshipService CreateLikeRelationshipService;
@inject ICurrentAuthUser CurrentAuthUser;
@inject ICreatePostCommentService CreatePostCommentService;
@inject IGetPostCommentService GetPostCommentService;


@if (FreeFormPost is not null)
{
    <PageTitle>MHR Knowledge sharing platform - @FreeFormPost.Title</PageTitle>
    <div class="container">
        <h1 class="title">@FreeFormPost.Title</h1>
        <div>@((MarkupString)@FreeFormPost.GetBody())</div>

        <div class="row" style="margin-top: 20px;">
            @foreach (var tag in FreeFormPost.Tags)
            {
                <RadzenBadge Text=@tag.Value Style="max-width: 90px; margin-right: 5px;"></RadzenBadge>
            }
        </div>
        <div class="info">
            <p class="author">Created by: @FreeFormPost.GetAuthor().Name</p>
            <p class="date">Created on: @FreeFormPost.GetDateTimeCreated().ToShortDateString()</p>
        </div>

        <div class="actions">
            <button class="like-button" @onclick="Like"><i class="fas fa-heart"></i> Like</button>
            <p class="likes">Likes: @likeCount</p>
        </div>
    </div>
    
    @if (comments.Count == 0)
    {
        <p>No comments yet.</p>
    }
    else
    {
        @foreach (var comment in comments)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@comment.personName</h5>
                    <p class="card-text">@comment.comment</p>
                </div>
            </div>
        }
    }
    <div class="form-group">
        <label for="commentText">Comment:</label>
        <InputTextArea id="commentText" class="form-control" @bind-Value="PostComment" />
    </div>
    <button onclick="@HandleSubmit" type="submit" class="btn btn-primary">Submit</button>

}

<style>
    .container {
        margin: 0 auto;
        padding: 20px;
    }

    .title {
        font-size: 32px;
        font-weight: bold;
        margin: 0 0 10px;
    }

    .summary {
        font-size: 18px;
        line-height: 1.5;
        margin: 0 0 20px;
    }

    .link {
        display: inline-block;
        font-size: 18px;
        color: #06c;
        text-decoration: none;
        border-bottom: 2px solid #06c;
        margin: 0 0 20px;
    }

    .info {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin: 0 0 20px;
    }

    .author {
        font-size: 14px;
        color: #888;
        margin: 0;
    }

    .date {
        font-size: 14px;
        color: #888;
        margin: 0;
    }

    .actions {
        display: flex;
        align-items: center;
    }

    .like-button {
        display: flex;
        align-items: center;
        font-size: 16px;
        color: #06c;
        background-color: transparent;
        border: none;
        cursor: pointer;
        margin: 0;
        padding: 0;
    }

    .like-button:hover {
        text-decoration: underline;
    }

    .likes {
        font-size: 14px;
        color: #888;
        margin: 0 0 0 10px;
    }
</style>

@code {

    [Parameter]
    public Guid Id { get; set; }

    public FreeFormPost? FreeFormPost = null;
    
    public List<PostCommentDto> comments = new List<PostCommentDto>();

    private string CurrentPersonName = string.Empty;
    
    private string PostComment = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        FreeFormPost = await GetFreeFormPostService.GetFreeFormPostAsync(Id);
        comments = (await GetPostCommentService.GetPostCommentsAsync(Id)).ToList();
        IList<Guid> peopleLiked = FreeFormPost.PeopleLiked.ToList();
        Person person = (await CurrentAuthUser.GetPersonAsync())!;
        likeCount = peopleLiked.Count;
        hasLiked = peopleLiked.Contains(person.Id);
    }

    private int likeCount = 0;

    private bool hasLiked = false;

    private async Task Like()
    {
        await CreateLikeRelationshipService.CreateLike(FreeFormPost!.Id);
        hasLiked = true;
        likeCount++;
    }
    
    private async Task HandleSubmit()
    {
        await CreatePostCommentService.CreatePostCommentAsync(PostComment, Id);
        comments.Add(new PostCommentDto(CurrentPersonName, PostComment, DateTime.Now));
        PostComment = string.Empty;
    }

}