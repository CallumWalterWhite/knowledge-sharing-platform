@using KnowledgeShare.Core.Graph
@using System.Linq;
@using System.Text.Json
@inject IGraphVisualService GraphVisualService
@inject IJSRuntime JS
@page "/graphvisual"
<svg id="graph" width="1500" height="800"></svg>

<style>
    .links line {
      stroke-opacity: 0.6;
      stroke-width: 1px;
      fill: none;
    }
    
    .nodes circle {
      stroke: #333;
      stroke-width: 1.5px;
      cursor:grab;
    }
</style>
@code {
    public List<GraphNode> Nodes = new List<GraphNode>();

    public List<GraphEdge> Edges = new List<GraphEdge>();
    
    public Graph Graph { get; set; }
    
    protected override void OnInitialized()
    {
        Task t = Task.Run(async () =>
        {
            (IEnumerable<GraphNode>, IEnumerable<GraphEdge>) graph = await GraphVisualService.GetGraphDisplayAsync();
            Nodes = graph.Item1.ToList();
            Edges = graph.Item2.ToList();
            Graph = new Graph()
            {
                nodes = Nodes.Select(x => new Node()
                {
                    id = x.Label,
                    type = x.Type
                }).ToList(),
                links = Edges.Select(x => new Link()
                {
                    source = x.SourceNode.Label,
                    target = x.TargetNode.Label
                }).ToList()
            };
        });
        Task.WaitAll(t);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("drawGraph", JsonSerializer.Serialize(Graph));
        }
    }

    [JSInvokable]
    public void NodeClicked(string nodeId) {
        // handle node clicked event
    }
}