@using System.Linq
@using KnowledgeShare.Core.Posts
@using KnowledgeShare.Web.Shared.Posts.Article
@using KnowledgeShare.Web.Shared.Posts.Book
@using KnowledgeShare.Web.Shared.Posts.FreeForm
@inject ISearchPostService SearchPostService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;

<div @onwheel="@OnScroll" id="myDiv" style="overflow-y: scroll;">
    <ListView Items="@PostsToShow">
        <ItemTemplate>
            <div class="row justify-content-center">
                @foreach (var postResult in PostsToShow)
                {
                    @switch (postResult.Type)
                    {
                        case "ArticlePost":
                            <ArticlePostSocialFeedDisplay Id=@postResult.Id/>
                            break;
                        case "BookPost":
                            <BookPostSocialFeedDisplay Id=@postResult.Id/>
                            break;
                        case "FreeFormPost":
                            <FreeFormSocialFeedDisplay Id=@postResult.Id/>
                            break;
                            
                    }
                }
            </div>
        </ItemTemplate>
    </ListView>
</div>

@code {
    private IEnumerable<SearchPostResultDto> AllPosts = new List<SearchPostResultDto>();

    private List<SearchPostResultDto> PostsToShow = new List<SearchPostResultDto>();
    
    int pageSize = 10; // number of items to load per page
    int page = 1; // current page
    bool isLoading = false; // flag to prevent multiple requests
    
    protected override async Task OnInitializedAsync()
    {
        AllPosts = await SearchPostService.RecommendAsync();
        PostsToShow = AllPosts.Take(10).ToList();
    }

    private async Task OnScroll(EventArgs e)
    {
        var scrollTop = await JSRuntime.InvokeAsync<int>(
            "eval", "document.getElementsByClassName('rz-body')[0].scrollTop");
        var scrollHeight = await JSRuntime.InvokeAsync<int>(
            "eval", "document.getElementsByClassName('rz-body')[0].scrollHeight");;
        var clientHeight = await JSRuntime.InvokeAsync<int>(
            "eval", "document.getElementsByClassName('rz-body')[0].clientHeight");
        var isBottom = scrollTop + clientHeight >= scrollHeight;

        if (isBottom && !isLoading)
        {
            isLoading = true;
            page++;
            var nextPage = (int)Math.Truncate(100 * ((double)PostsToShow.Count / 10) + page) / 100;
            var newPosts = AllPosts.Skip(nextPage * 10).Take(10).Where(x => PostsToShow.Contains(x) is false).ToList();
            PostsToShow.AddRange(newPosts);
            isLoading = false;
        }
    }
}