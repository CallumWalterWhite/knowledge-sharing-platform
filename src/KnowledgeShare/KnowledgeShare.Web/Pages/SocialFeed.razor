@using System.Linq
@using KnowledgeShare.Core.Posts
@inject ISearchPostService SearchPostService;
@inject IJSRuntime JSRuntime;

<div @onwheel="@OnScroll" id="myDiv" style="overflow-y: scroll;">
    <ListView Items="@PostsToShow">
        <ItemTemplate>
            <div class="row justify-content-center">
                @foreach (var postResult in PostsToShow)
                {
                    <RadzenCard Style="margin-top: 40px; padding: 20px 40px 40px; width: 800px; float: none">
                        <div class="row">
                            <RadzenLabel Text=@postResult.Title
                            Style="font-style: normal; text-transform: none; font-size: 24px; font-weight: bold" />
                        </div>
                        <div class="row">
                            <RadzenLabel Text=@postResult.Summary />
                            <div class="row" style="margin-top: 20px;">
                                @foreach (var tag in postResult.Tags)
                                {
                                    <RadzenBadge Text=@tag Style="max-width: 90px; margin-right: 5px;"></RadzenBadge>
                                }
                            </div>
                            <div class="row rz-justify-content-right" style="margin-top: 20px; float: none">
                                <RadzenButton Style="width: 72px; height: 26px; float: none" Text="View"></RadzenButton>
                            </div>
                        </div>
                    </RadzenCard>
                }
            </div>
        </ItemTemplate>
    </ListView>
</div>

@code {
    private IEnumerable<SearchPostResultDto> AllPosts = new List<SearchPostResultDto>();

    private List<SearchPostResultDto> PostsToShow = new List<SearchPostResultDto>();
    
    int pageSize = 10; // number of items to load per page
    int page = 1; // current page
    bool isLoading = false; // flag to prevent multiple requests

    protected override async Task OnInitializedAsync()
    {
        AllPosts = await SearchPostService.RecommendAsync();
        PostsToShow = AllPosts.Take(10).ToList();
    }

    private async Task OnScroll(EventArgs e)
    {
        var scrollTop = await JSRuntime.InvokeAsync<int>(
            "eval", "document.getElementsByClassName('rz-body')[0].scrollTop");
        var scrollHeight = await JSRuntime.InvokeAsync<int>(
            "eval", "document.getElementsByClassName('rz-body')[0].scrollHeight");;
        var clientHeight = await JSRuntime.InvokeAsync<int>(
            "eval", "document.getElementsByClassName('rz-body')[0].clientHeight");
        var isBottom = scrollTop + clientHeight >= scrollHeight;

        if (isBottom && !isLoading)
        {
            isLoading = true;
            page++;
            var nextPage = (int)Math.Truncate(100 * ((double)PostsToShow.Count / 10) + page) / 100;
            var newPosts = AllPosts.Skip(nextPage * 10).Take(10).ToList();
            PostsToShow.AddRange(newPosts);
            isLoading = false;
        }
    }
}