@using System.Linq
@using KnowledgeShare.Core.Posts
@using KnowledgeShare.Core.Tags
@using KnowledgeShare.Web.Shared.Posts.Article
@using KnowledgeShare.Web.Shared.Posts.Book
@using KnowledgeShare.Web.Shared.Posts.FreeForm
@using Microsoft.AspNetCore.Components.Web
@inject ISearchPostService SearchPostService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject IGetAllTagsService GetAllTagsService;

@page "/discovery"

<div class="filter">
    <h2>Filter by Tag:</h2>
    @foreach (var tag in Tags)
    {
        <label><input type="checkbox" checked="@selectedTags.Contains(tag)" @onchange="@(e => FilterByTag(tag, e))" />@tag.Value</label>
    }
</div>

<div style="height: 100vh; overflow-y: scroll;margin-top: -50px;" class="scrollable-content" @onscroll="@OnScroll">
    <div style="height: @contentHeight px;">
        <div class="row justify-content-center">
            @foreach (var postResult in filteredPosts)
            {
                @switch (postResult.Type)
                {
                    case "ArticlePost":
                        <ArticlePostSocialFeedDisplay SearchPostResultDto=@postResult/>
                        break;
                    case "BookPost":
                        <BookPostSocialFeedDisplay SearchPostResultDto=@postResult/>
                        break;
                    case "FreeFormPost":
                        <FreeFormSocialFeedDisplay Id=@postResult.Id/>
                        break;
                            
                }
            }
        </div>
    </div>
</div>

<style>
    .filter {
        margin-bottom: 20px;
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        align-items: center;
    }
    
    .filter h2 {
        margin-right: 10px;
        font-size: 20px;
    }
    
    .filter label {
        margin-right: 10px;
        font-size: 16px;
    }
    
    .posts {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: flex-start;
    }
    
    .post {
        width: 45%;
        padding: 20px;
        margin-bottom: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    
    .post h2 {
        font-size: 24px;
        margin-bottom: 10px;
    }
    
    .post .tags {
        margin-bottom: 10px;
    }
    
    .post .tag {
        display: inline-block;
        padding: 5px 10px;
        margin-right: 5px;
        margin-bottom: 5px;
        background-color: #f2f2f2;
        border-radius: 5px;
        font-size: 14px;
        font-weight: bold;
    }
</style>

@code {
    private IEnumerable<SearchPostResultDto> AllPosts = new List<SearchPostResultDto>();
    private List<SearchPostResultDto> filteredPosts = new List<SearchPostResultDto>();
    private List<SearchPostResultDto> PostsToShow = new List<SearchPostResultDto>();
    private IEnumerable<Tag> Tags = new List<Tag>();
    private List<Tag> selectedTags = new List<Tag>();
    
    private void FilterByTag(Tag tag, ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            selectedTags.Add(tag);
        }
        else
        {
            selectedTags.Remove(tag);
        }
        
        if (selectedTags.Any())
        {
            filteredPosts = AllPosts.Where(p => p.Tags.Any(t => selectedTags.Select(y => y.Value).Contains(t))).ToList();
            PostsToShow = filteredPosts.Take(10).ToList();
        }
        else
        {
            filteredPosts = AllPosts.ToList();
            PostsToShow = filteredPosts.Take(10).ToList();
        }
    }

    private int contentHeight;
    
    int pageSize = 10; // number of items to load per page
    int page = 1; // current page
    bool isLoading = false; // flag to prevent multiple requests

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateContentHeight();
        }
    }

    protected override void OnInitialized()
    {
        Task t = Task.Run(async () =>
        {
            AllPosts = await SearchPostService.RecommendAsync();
            Tags = await GetAllTagsService.GetAllAsync();
        });
        Task.WaitAll(t);
        filteredPosts = AllPosts.ToList();
        PostsToShow = filteredPosts.Take(10).ToList();
    }

    [JSInvokable]
    public async Task OnResize()
    {
        await UpdateContentHeight();
    }

    private async Task UpdateContentHeight()
    {
        contentHeight = await JSRuntime.InvokeAsync<int>(
            "eval", "document.getElementsByClassName('scrollable-content')[0].offsetHeight");
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnScroll()
    {
        try
        {
            var scrollTop = await JSRuntime.InvokeAsync<int>(
                "eval", "document.getElementsByClassName('scrollable-content')[0].scrollTop");
            var scrollHeight = await JSRuntime.InvokeAsync<int>(
                "eval", "document.getElementsByClassName('scrollable-content')[0].scrollHeight");
            ;
            var clientHeight = await JSRuntime.InvokeAsync<int>(
                "eval", "document.getElementsByClassName('scrollable-content')[0].clientHeight");
            if (scrollTop + clientHeight >= scrollHeight)
            {
                isLoading = true;
                page++;
                var nextPage = (int)Math.Truncate(100 * ((double)PostsToShow.Count / 10) + page) / 100;
                var newPosts = filteredPosts.Skip(nextPage * 10).Take(10).Where(x => PostsToShow.Contains(x) is false).ToList();
                PostsToShow.AddRange(newPosts);
                isLoading = false;
                await UpdateContentHeight();
            }
        }
        catch (Exception ex)
        {
            //IGNORE
        }
    }
}