@using System.Linq
@using KnowledgeShare.Core.Posts
@using KnowledgeShare.Core.Tags
@using KnowledgeShare.Web.Shared.Posts.Article
@using KnowledgeShare.Web.Shared.Posts.Book
@using KnowledgeShare.Web.Shared.Posts.FreeForm
@using Microsoft.AspNetCore.Components.Web
@inject ISearchPostService SearchPostService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject IGetAllTagsService GetAllTagsService;

@page "/discovery"


<div class="row">
    <div class="col-md-3">
        <h4 class="mb-4">Tags</h4>
        <ul class="list-group">
            @foreach (var tag in Tags)
            {
                <label class="ch-container">@tag.Value
                    <input type="checkbox" checked="@selectedTags.Any(x => x.Value == tag.Value)" @onchange="@(e => FilterByTag(tag, e))">
                    <span class="checkmark"></span>
                </label>
            }
        </ul>
    </div>
    <div class="col-md-9 scrollable-content" style="height: 100vh; overflow-y: scroll;margin-top: -50px;" @onscroll="@OnScroll">
        <input type="text" class="form-control mb-3" placeholder="Search by title" @bind="searchTerm" @onkeyup="FilterBySearchTerm" />
        <div class="card-deck">
            @foreach (var post in PostsToShow)
            {
                @switch (post.Type)
                {
                    case "ArticlePost":
                        <ArticlePostSocialFeedDisplay SearchPostResultDto=@post/>
                        break;
                    case "BookPost":
                        <BookPostSocialFeedDisplay SearchPostResultDto=@post/>
                        break;
                    case "FreeFormPost":
                        <FreeFormSocialFeedDisplay Id=@post.Id/>
                        break;

                }
            }
        </div>
    </div>
</div>
<style>
    .btn-link {
        color: #6c757d;
        text-decoration: none;
    }
    
    .btn-link:hover {
        text-decoration: underline;
    }
    
    .list-group-item {
        border: 0;
    }
    
    .list-group-item:hover {
        background-color: #f8f9fa;
    }
    
    .form-control {
        border-radius: 20px;
        border: 0;
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.1);
    }
    /* Customize the label (the container) */
    .ch-container {
      display: block;
      position: relative;
      padding-left: 35px;
      margin-bottom: 12px;
      cursor: pointer;
      font-size: 22px;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }
    
    /* Hide the browser's default checkbox */
    .ch-container input {
      position: absolute;
      opacity: 0;
      cursor: pointer;
      height: 0;
      width: 0;
    }
    
    /* Create a custom checkbox */
    .checkmark {
      position: absolute;
      top: 0;
      left: 0;
      height: 25px;
      width: 25px;
      background-color: #eee;
    }
    
    /* On mouse-over, add a grey background color */
    .ch-container:hover input ~ .checkmark {
      background-color: #ccc;
    }
    
    /* When the checkbox is checked, add a blue background */
    .ch-container input:checked ~ .checkmark {
      background-color: #2196F3;
    }
    
    /* Create the checkmark/indicator (hidden when not checked) */
    .checkmark:after {
      content: "";
      position: absolute;
      display: none;
    }
    
    /* Show the checkmark when checked */
    .ch-container input:checked ~ .checkmark:after {
      display: block;
    }
    
    /* Style the checkmark/indicator */
    .ch-container .checkmark:after {
      left: 9px;
      top: 5px;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 3px 3px 0;
      -webkit-transform: rotate(45deg);
      -ms-transform: rotate(45deg);
      transform: rotate(45deg);
    }
</style>

@code {
    private string searchTerm;
    private IEnumerable<SearchPostResultDto> AllPosts = new List<SearchPostResultDto>();
    private List<SearchPostResultDto> filteredPosts = new List<SearchPostResultDto>();
    private List<SearchPostResultDto> PostsToShow = new List<SearchPostResultDto>();
    private IEnumerable<Tag> Tags = new List<Tag>();
    private List<Tag> selectedTags = new List<Tag>();
    
    private void FilterByTag(Tag tag, ChangeEventArgs e)
    {
        searchTerm = "";
        if ((bool)e.Value)
        {
            if (selectedTags.All(x => x.Value != tag.Value))
                selectedTags.Add(tag);
        }
        else
        {
            selectedTags.Remove(tag);
        }
        
        if (selectedTags.Any())
        {
            filteredPosts = AllPosts.Where(p => p.Tags.Any(t => selectedTags.Select(y => y.Value).Contains(t))).ToList();
            PostsToShow = filteredPosts.Take(10).ToList();
        }
        else
        {
            filteredPosts = AllPosts.ToList();
            PostsToShow = filteredPosts.Take(10).ToList();
        }
    }
    
    private void FilterBySearchTerm()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            PostsToShow = filteredPosts.Take(10).ToList();
        }
        else
        {
            PostsToShow = filteredPosts.Where(p => p.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();   
        }
    }
    
    private void GoToPost(SearchPostResultDto searchPostResultDto)
    {
        switch (searchPostResultDto.Type)
        {
            case TypeConstant.ArticlePost:
                NavigationManager.NavigateTo($"/articlepost/{searchPostResultDto.Id}");
                break;
            case TypeConstant.BookPost:
                NavigationManager.NavigateTo($"/bookpost/{searchPostResultDto.Id}");
                break;
            case TypeConstant.FreeFormPost:
                NavigationManager.NavigateTo($"/freeformpost/{searchPostResultDto.Id}");
                break;
        }
    }

    private int contentHeight;
    
    int pageSize = 10; // number of items to load per page
    int page = 1; // current page
    bool isLoading = false; // flag to prevent multiple requests

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    protected override void OnInitialized()
    {
        Task t = Task.Run(async () =>
        {
            IList<Tag> user_tags = (await GetAllTagsService.GetLikedTagsAsync()).ToList();
            AllPosts = await SearchPostService.RecommendAsync();
            Tags = await GetAllTagsService.GetAllAsync();
            
            foreach (Tag tag in Tags.Where(x => user_tags.Select(y => y.Value).Contains(x.Value)).ToList())
            {
                selectedTags.Add(tag);
            }
        });
        Task.WaitAll(t);
        filteredPosts = AllPosts.ToList();
        if (selectedTags.Any())
        {
            filteredPosts = AllPosts.Where(p => p.Tags.Any(t => selectedTags.Select(y => y.Value).Contains(t))).ToList();
            PostsToShow = filteredPosts.Take(10).ToList();
        }
        else
        {
            filteredPosts = AllPosts.ToList();
            PostsToShow = filteredPosts.Take(10).ToList();
        }
    }
    
    [JSInvokable]
    public async Task OnResize()
    {
        await UpdateContentHeight();
    }

    private async Task UpdateContentHeight()
    {
        contentHeight = await JSRuntime.InvokeAsync<int>(
            "eval", "document.getElementsByClassName('scrollable-content')[0].offsetHeight");
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnScroll()
    {
        try
        {
            var scrollTop = await JSRuntime.InvokeAsync<int>(
                "eval", "document.getElementsByClassName('scrollable-content')[0].scrollTop");
            var scrollHeight = await JSRuntime.InvokeAsync<int>(
                "eval", "document.getElementsByClassName('scrollable-content')[0].scrollHeight");
            ;
            var clientHeight = await JSRuntime.InvokeAsync<int>(
                "eval", "document.getElementsByClassName('scrollable-content')[0].clientHeight");
            if (scrollTop + clientHeight >= scrollHeight)
            {
                isLoading = true;
                page++;
                var nextPage = (int)Math.Truncate(100 * ((double)PostsToShow.Count / 10) + page) / 100;
                var newPosts = AllPosts.Skip(nextPage * 10).Take(10).Where(x => PostsToShow.Contains(x) is false).ToList();
                PostsToShow.AddRange(newPosts);
                isLoading = false;
                await UpdateContentHeight();
            }
        }
        catch (Exception ex)
        {
    //IGNORE
        }
    }
}