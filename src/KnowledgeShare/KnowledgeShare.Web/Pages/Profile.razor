@page "/profile"

@using Microsoft.Identity.Web
@using Microsoft.Graph
@using KnowledgeShare.Core.Posts
@inject GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject ISearchPostService SearchPostService;
@inject NavigationManager NavigationManager;
@inject ContextMenuService ContextMenuService
<PageTitle>MHR Knowledge sharing platform - Profile</PageTitle>
@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
     <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width: 420px">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
            <RadzenImage Path="@UserPhotoPath" Style="width: 100px; height: 100px; border-radius: 50%;" />
            <RadzenStack Gap="0">
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Employee</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@(user.DisplayName)</b></RadzenText>
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Department</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@user.Department</b></RadzenText>
                <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">Job Title</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1"><b>@user.JobTitle</b></RadzenText>
            </RadzenStack>
        </RadzenStack>
        <RadzenCard class="rz-background-color-primary-lighter rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 1rem;">
            <RadzenText TextStyle="TextStyle.H6" class="rz-color-primary-light"><strong>Social Stats</strong></RadzenText>
            <RadzenRow RowGap="0">
                <RadzenColumn SizeSM="4">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Posts</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@Posts.Count()</b></RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Likes</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>@totalLikes.ToString()</b></RadzenText>
                </RadzenColumn>
                <RadzenColumn SizeSM="8">
                    <RadzenText TextStyle="TextStyle.Overline" class="rz-color-primary-light rz-display-flex rz-mt-4 rz-mb-0">Comments</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1"><b>0</b></RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </RadzenCard>
    <p>Right click on a table cell to open the context menu.</p>
    <RadzenDataGrid AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                    AllowSorting="true" Data="@Posts" TItem="SearchPostResultDto" ColumnWidth="200px"
                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedPosts CellContextMenu="@OnCellContextMenu">
        <Columns>
            <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Title" Title="Title" />
            <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Summary" Title="Summary" Sortable="false" Filterable="false" />
            <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Type" Title="Type" />
            <RadzenDataGridColumn TItem="SearchPostResultDto" Property="TagCount" Title="Amount of Tags" Filterable="false" />
            <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Likes" Title="Likes" Filterable="false" />
            <RadzenDataGridColumn TItem="SearchPostResultDto" Property="Comments" Title="Comments" Filterable="false" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    User user;

    int totalLikes = 0;
    
    private IEnumerable<SearchPostResultDto> Posts = new List<SearchPostResultDto>();
    IList<SearchPostResultDto> selectedPosts;
    
    string UserPhotoPath = "/Images/avatardefault.png";

    void OnCellContextMenu(DataGridCellMouseEventArgs<SearchPostResultDto> args)
    {
        selectedPosts = new List<SearchPostResultDto>() { args.Data };

        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "View", Value = 1, },
                new ContextMenuItem(){ Text = "Edit", Value = 2, },
                new ContextMenuItem(){ Text = "Delete", Value = 3, },
            }, 
            (e) => {
                       if (int.Parse(e.Value.ToString() ?? string.Empty) == 1)
                       {
                           SearchPostResultDto searchPostResultDto = selectedPosts.First();
                           switch (searchPostResultDto.Type)
                           {
                               case TypeConstant.ArticlePost:
                                   ContextMenuService.Close();
                                   NavigationManager.NavigateTo($"/articlepost/{selectedPosts.First().Id}");
                                   break;
                               case TypeConstant.BookPost:
                                   ContextMenuService.Close();
                                   NavigationManager.NavigateTo($"/bookpost/{selectedPosts.First().Id}");
                                   break;
                               case TypeConstant.FreeFormPost:
                                   ContextMenuService.Close();
                                   NavigationManager.NavigateTo($"/freeformpost/{selectedPosts.First().Id}");
                                   break;
                           }
                       }
            }
            );
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();
            Posts = await SearchPostService.GetPostsByCurrentPersonAsync();
            totalLikes = Posts.Sum(x => x.Likes);
            if (user is not null)
            {
                Stream photoStream = await GraphServiceClient.Me.Photo.Content.Request().GetAsync();
                byte[] buffer = new byte[16*1024];
                using (MemoryStream ms = new MemoryStream())
                {
                    int read;
                    while ((read = await photoStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    {
                        ms.Write(buffer, 0, read);
                    }
                    byte[] data = ms.ToArray();
                    UserPhotoPath = $"data:image/jpeg;base64,{Convert.ToBase64String(data)}";
                }
            }
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
        await base.OnInitializedAsync();
        selectedPosts = Posts.Take(1).ToList();
        await InvokeAsync(StateHasChanged);
    }
}
